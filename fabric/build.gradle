plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

tasks.register("signedJar") {
    def output = buildDir.toPath()
            .resolve("libs")
            .resolve(remapJar.archiveFileName.get().replace(".jar", "-sgd.jar"))
            .toString()

    outputs.file new File(output)

    dependsOn remapJar

    doLast {
        System.out.println("Signing jar...")

        def store = System.getenv("JAR_SIGNING_STORE")
        def storeLoc = new File("$buildDir/store.jks")
        def writer = new FileOutputStream(storeLoc)
        writer.write(Base64.decoder.decode(store))
        writer.close()

        def alias = System.getenv("JAR_SIGNING_ALIAS")
        def storePass = System.getenv("JAR_SIGNING_STORE_PASS")
        def keyPass = System.getenv("JAR_SIGNING_KEY_PASS")

        def input = buildDir.toPath()
                .resolve("libs")
                .resolve(remapJar.archiveFileName.get())
                .toString()
        def jarsigner = [
                "jarsigner",
                "-keystore", storeLoc.toPath().toString(),
                "-storepass", storePass,
                "-signedjar", output,
                "-keypass", keyPass,
                input,
                alias
        ].execute()
        jarsigner.waitFor()

        return output
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "scriptor-magicae"
    versionNumber = version
    versionName = version + "-FABRIC"
    changelog = (System.getenv("CHANGELOG") ?: "Could not load changelog").replace("\n", "\n\n")
    versionType = "beta"
    uploadFile = tasks.named("signedJar").get().outputs.files.singleFile
    gameVersions = ["1.20"]
    loaders = ["fabric"]
    dependencies {
        required.project "architectury-api"
        required.project "fabric-api"
    }
}
tasks.modrinth.dependsOn tasks.named("signedJar")

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    common(project(path: ":fabric-like", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":fabric-like", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
